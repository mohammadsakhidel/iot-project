// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackDataAccess.Database;

namespace TrackDataAccess.Migrations
{
    [DbContext(typeof(TrackDbContext))]
    [Migration("20201123084410_TrackerFieldsAdded")]
    partial class TrackerFieldsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TrackDataAccess.Models.AlarmReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<double?>("Altitude")
                        .HasColumnName("altitude")
                        .HasColumnType("double");

                    b.Property<double?>("Battery")
                        .HasColumnName("battery")
                        .HasColumnType("double");

                    b.Property<double>("Direction")
                        .HasColumnName("direction")
                        .HasColumnType("double");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double");

                    b.Property<string>("LatitudeMark")
                        .IsRequired()
                        .HasColumnName("latitude_mark")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double");

                    b.Property<string>("LongitudeMark")
                        .IsRequired()
                        .HasColumnName("longitude_mark")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime>("ReportTime")
                        .HasColumnName("report_time")
                        .HasColumnType("datetime");

                    b.Property<double?>("SignalStrength")
                        .HasColumnName("signal_strength")
                        .HasColumnType("double");

                    b.Property<double>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double");

                    b.Property<string>("TrackerId")
                        .IsRequired()
                        .HasColumnName("tracker_id")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("TrackerState")
                        .HasColumnName("tracker_state")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("TrackerId");

                    b.ToTable("alarm_reports");
                });

            modelBuilder.Entity("TrackDataAccess.Models.LocationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<double?>("Altitude")
                        .HasColumnName("altitude")
                        .HasColumnType("double");

                    b.Property<double?>("Battery")
                        .HasColumnName("battery")
                        .HasColumnType("double");

                    b.Property<double>("Direction")
                        .HasColumnName("direction")
                        .HasColumnType("double");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double");

                    b.Property<string>("LatitudeMark")
                        .IsRequired()
                        .HasColumnName("latitude_mark")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double");

                    b.Property<string>("LongitudeMark")
                        .IsRequired()
                        .HasColumnName("longitude_mark")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime>("ReportTime")
                        .HasColumnName("report_time")
                        .HasColumnType("datetime");

                    b.Property<double?>("SignalStrength")
                        .HasColumnName("signal_strength")
                        .HasColumnType("double");

                    b.Property<double>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double");

                    b.Property<string>("TrackerId")
                        .IsRequired()
                        .HasColumnName("tracker_id")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("TrackerState")
                        .HasColumnName("tracker_state")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("TrackerId");

                    b.ToTable("location_reports");
                });

            modelBuilder.Entity("TrackDataAccess.Models.Tracker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("AssociatedProductId")
                        .HasColumnName("associated_product_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeleteTime")
                        .HasColumnName("delete_time")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnName("device_type")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastConnectedServer")
                        .HasColumnName("last_connected_server")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnName("last_connection")
                        .HasColumnType("datetime");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnName("manufacturer")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("RawID")
                        .IsRequired()
                        .HasColumnName("raw_id")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16);

                    b.HasKey("Id");

                    b.ToTable("trackers");
                });

            modelBuilder.Entity("TrackDataAccess.Models.AlarmReport", b =>
                {
                    b.HasOne("TrackDataAccess.Models.Tracker", "Tracker")
                        .WithMany()
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackDataAccess.Models.LocationReport", b =>
                {
                    b.HasOne("TrackDataAccess.Models.Tracker", "Tracker")
                        .WithMany()
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
